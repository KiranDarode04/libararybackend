generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String       @unique
  role      Role
  password  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  librarian BookIR[]     @relation(name: "librarian")
  student   BookIR[]     @relation(name: "student")
  BookI     BookImport[] @relation(name: "User")
}

enum Role {
  ADMIN
  STUDENT
  LIBRARIAN
}

model Book {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String       @unique
  author    String
  bookCode  String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  BookI     BookImport[] @relation(name: "bookCode")
  BookStore BookStore[]  @relation(name: "bookStore")
  Book      BookIR[]     @relation(name: "bookIR")
}

model BookImport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId    String   @db.ObjectId
  Quantity  Int
  user_id   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(name: "User", fields: [user_id], references: [id])
  Book      Book     @relation(name: "bookCode", fields: [bookId], references: [id])
}

model BookIR {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId    String   @db.ObjectId
  studentId String   @db.ObjectId
  user_id   String   @db.ObjectId
  status    Type? // ISSUE RETURN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  librarian User     @relation(name: "librarian", fields: [user_id], references: [id])
  student   User     @relation(name: "student", fields: [studentId], references: [id])
  bookIR    Book     @relation(name: "bookIR", fields: [bookId], references: [id])
}

enum Type {
  ISSUE
  RETURN
}

model BookStore {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId            String   @unique @db.ObjectId
  totalQuantity     Int
  availableQuantity Int
  issueQuantity     Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Book              Book     @relation(name: "bookStore", fields: [bookId], references: [id])
}

model BookStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    Type
  bookId    String?  @db.ObjectId
  studentId String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
